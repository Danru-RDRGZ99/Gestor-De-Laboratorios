name: Build Android APK (Flet → Flutter 3.35.6)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  android-apk:
    runs-on: ubuntu-latest

    env:
      SERIOUS_PYTHON_SITE_PACKAGES: ${{ github.workspace }}/build/site-packages

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Python & deps (y site-packages para serious_python) ----
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          mkdir -p build/site-packages
          if [ -f requirements.txt ]; then pip install -r requirements.txt -t build/site-packages; fi
          python -c "import sys,sysconfig,site,os; print('PY:', sys.version); print('site-packages exists:', os.path.isdir('build/site-packages'))"

      # ---- Limpiar y empaquetar con Flet, pero SIN romper el job si falla ----
      - name: Clean previous build dir
        run: rm -rf build/flutter build/app || true

      - name: Install Flet CLI
        run: pip install flet==0.28.3

      - name: Package with Flet (ignore build failure)
        run: |
          set +e
          flet build apk
          CODE=$?
          echo "FLET_EXIT_CODE=$CODE (esperado si falla por Flutter 3.29/Dart 3.7)"
          set -e
          # Asegurar que existen los directorios clave
          mkdir -p build/app
          mkdir -p build/flutter/app
          # Si Flet generó app.zip en build/app lo dejamos; si no, lo creamos manualmente
          if [ ! -f build/app/app.zip ]; then
            echo "Flet no dejó app.zip, empaquetando manualmente…"
            zip -r build/app/app.zip . -x ".git/*" ".github/*" "build/*" "__pycache__/*" "*.pyc" ".venv/*"
          fi
          # Hash
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum build/app/app.zip | awk '{print $1}' > build/app/app.zip.hash
          else
            shasum -a 256 build/app/app.zip | awk '{print $1}' > build/app/app.zip.hash
          fi
          # Asegurar copia en build/flutter/app (lo que usa el bootstrap)
          cp -f build/app/app.zip build/flutter/app/app.zip
          cp -f build/app/app.zip.hash build/flutter/app/app.zip.hash || true
          ls -la build/app
          ls -la build/flutter || true
          ls -la build/flutter/app || true

      # ---- Flutter 3.35.6 para compilar el APK ----
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter 3.35.6
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      # Aceptar licencias (best-effort)
      - name: Accept Android SDK licenses
        run: |
          set +e
          if [ -n "$ANDROID_SDK_ROOT" ] && [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          elif [ -n "$ANDROID_HOME" ] && [ -x "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          else
            echo "sdkmanager no encontrado; continuamos."
          fi
          set -e

      # (Opcional) Parche por si el bootstrap queda sin pubspec.yaml
      # Normalmente Flet sí deja el proyecto en build/flutter.
      - name: Sanity check bootstrap
        run: |
          if [ ! -f build/flutter/pubspec.yaml ]; then
            echo "::error::No existe build/flutter/pubspec.yaml. El paso de Flet no generó el bootstrap."
            echo "Contenido de build/flutter:"
            ls -la build/flutter || true
            exit 1
          fi

      - name: Flutter pub get
        working-directory: build/flutter
        run: |
          flutter --version
          flutter clean
          flutter pub get

      # IMPORTANTE: si ves otra vez el error de 'webview_flutter_android 4.10.x/3.9 vs 3.7',
      #  ya no viene de aquí (estamos en Dart 3.9). No parcheamos a 4.8.0.
      #  Si aun así lo necesitaras, descomenta este bloque:
      #
      # - name: (Opcional) Override webview to 4.8.0
      #   working-directory: build/flutter
      #   run: |
      #     if ! grep -q "^dependency_overrides:" pubspec.yaml; then
      #       printf "\n\ndependency_overrides:\n  webview_flutter_android: 4.8.0\n" >> pubspec.yaml
      #     else
      #       sed -i 's/webview_flutter_android: .*/webview_flutter_android: 4.8.0/' pubspec.yaml || true
      #     fi
      #     cat pubspec.yaml
      #     flutter pub get

      - name: Build APK (release)
        working-directory: build/flutter
        env:
          SERIOUS_PYTHON_SITE_PACKAGES: ${{ env.SERIOUS_PYTHON_SITE_PACKAGES }}
        run: |
          flutter build apk --release
          ls -la build/app/outputs/flutter-apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: build/flutter/build/app/outputs/flutter-apk/app-release.apk
